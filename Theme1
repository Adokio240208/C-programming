#include <iostream>

using namespace std;

namespace A
{
	void function() 
	{
		std::cout << "Hello World";
	}
}

int main()
{
	//A::function();
	//cout << "Hello World";
	char a = 10;
	short b = 10;
	int c = 10;
}



/* 
	IDE
		Visual Studio같은 얘들임. 
		무슨 역할을 하냐? 우리가 코드를 작성할 수 있는 텍스트 에디터
		프로그래밍 언어를 오브젝트 코드로 바꿔주는 컴파일러
		오브젝트 코드를 exe 실행파일로 바꿔주는 링커
		그리고 오류를 찾아주는? 디버거
		이 모든 역할을 해내는게 IDE임

	키워드
		int, if, for 같이 우리가 써야 되는 얘들
		그래서 변수 이름을 얘네로 설정하면 오류남

	식별자
		개발자가 설정하는 것들
		예를 들면 int a; 라고 했을 때 a라던지
			  void function(){~~~} 라고 했을 때 function()이라던지
			  (함수 1도 기억안나니까 빠르게 복습해야함)
	
	연산자
		Ex) +, -, >, :: 등등

	전처리기
		얘는 #으로 시작하는 친구들임
		예를 들면 #include ~~, #define ~~ 요런것들
		전처리기는 컴파일 하기 전에 (프로그래밍 언어->오브젝트 코드) 실행됨
	
	Namespace
		Namespace는 뭉쳐놓을 때 좋을 거 같음
		같은 이름을 가진 변수나 함수를 사용하고 싶을 때 사용할 수도 있음
		std::cout << "Hello World"가 있을 때, 앞에 있는 std가 namespace이름
		::이 불러온다 느낌임
		만약 이걸 쓰기 싫다면 using namespace ~~~;를 하면 됨
		근데 남용하면 namespace를 쓰는 의미가 없어지니까 숏코딩아니면 쓰지 말자

	출력과 입력
		std::cout << "Hello World" << a(변수) << "Hi";
		이런식으로 이어서 붙일 수 있음
		std::cin >> name >> age;
		입력도 여러개 이어 받을 수 있음

	줄바꿈
		\n도 되지만 endl도 된다.
		예를 들면, std::cout << "Hello" << endl;

	비트, 바이트, 헥스(Hex)
		8bit = 1byte = 2Hex로 나타낼 수 있음
		Hex는 16진수로 앞에 0x를 붙여 나타냄

	
*/
